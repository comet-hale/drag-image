{"version":3,"sources":["ImageDrag.js","App.js","index.js"],"names":["dataStructure","pictures","reinsert","array","colFrom","rowFrom","colTo","rowTo","_array","slice","val","splice","calculateVisiblePositions","clamp","n","min","max","Math","getColumnWidth","window","innerWidth","length","height","width","layout","newOrder","map","column","col","range","item","row","springSetting1","stiffness","damping","springSetting2","ImageDrag","props","handleTouchStart","key","currentColumn","pressLocation","e","handleMouseDown","touches","handleTouchMove","preventDefault","handleMouseMove","pageX","pageY","state","order","lastPress","isPressed","delta","dx","dy","mouse","floor","indexOf","setState","pressX","pressY","handleMouseUp","handleResize","clearTimeout","resizeTimeout","applyResizingState","setTimeout","isResizing","this","addEventListener","removeEventListener","className","colIndex","style","x","y","visualPosition","isActive","translateX","translateY","scale","spring","onMouseDown","bind","onTouchStart","WebkitTransform","transform","zIndex","src","alt","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"kTAMMA,G,MAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,GACD,CAAC,KAGGC,EAAW,CACf,wIACA,wIACA,wIACA,wIACA,yIAGIC,EAAW,SAACC,EAAOC,EAASC,EAASC,EAAOC,GAChD,IAAMC,EAASL,EAAMM,MAAM,GACrBC,EAAMF,EAAOJ,GAASC,GAI5B,OAHAG,EAAOJ,GAASO,OAAON,EAAS,GAChCG,EAAOF,GAAOK,OAAOJ,EAAO,EAAGG,GAC/BE,EAA0BJ,GACnBA,GAIHK,EAAQ,SAACC,EAAGC,EAAKC,GAAT,OAAiBC,KAAKD,IAAIC,KAAKF,IAAID,EAAGE,GAAMD,IACpDG,EAAiB,kBAAOC,OAAOC,WAAapB,EAAcqB,OAF1C,GAEqErB,EAAcqB,QACnGC,EAAS,IAEXC,EAAQL,IACVM,EAAS,KAGLZ,EAA4B,SAACa,GACjCF,EAAQL,IACRM,EAASC,EAASC,KAAI,SAACC,EAAQC,GAC3B,OAAOC,IAAMF,EAAON,OAAS,GAAGK,KAAI,SAACI,EAAMC,GACzC,MAAO,CAACR,EAAQK,EAAKN,EAASS,UAMhCC,EAAiB,CAACC,UAAW,IAAKC,QAAS,IAC3CC,EAAiB,CAACF,UAAW,IAAKC,QAAS,IAkJlCE,E,YA/Ib,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA6BRC,iBAAmB,SAACC,EAAKC,EAAeC,EAAeC,GACrD,EAAKC,gBAAgBJ,EAAKC,EAAeC,EAAeC,EAAEE,QAAQ,KA/BjD,EAkCnBC,gBAAkB,SAACH,GACjBA,EAAEI,iBACF,EAAKC,gBAAgBL,EAAEE,QAAQ,KApCd,EAuCnBG,gBAAkB,YAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAAW,EAC2C,EAAKC,MAA7EC,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,UAA0BhD,EADJ,EACXoC,cAAwBa,EADb,EACaA,UADb,gBACwBC,MADxB,GACgCC,EADhC,KACoCC,EADpC,KAEpC,GAAIH,EAAW,CACb,IAAMI,EAAQ,CAACT,EAAQO,EAAIN,EAAQO,GAC7BlD,EAAQO,EAAMI,KAAKyC,OAAOD,EAAM,GAAMlC,EAAQ,GAAMA,GAAQ,EAAG,GAC/DhB,EAAQM,EAAMI,KAAKyC,OAAOD,EAAM,GAAMnC,EAAS,GAAMA,GAAS,EAAG,KACjEjB,EAAU8C,EAAM/C,GAASuD,QAAQP,GACjC3B,EAAWvB,EAASiD,EAAO/C,EAASC,EAASC,EAAOC,GAC1D,EAAKqD,SAAS,CACZH,QACAN,MAAO1B,EACPe,cAAelC,MAlDF,EAuDnBqC,gBAAkB,SAACJ,EAAKC,EAAN,KAA2D,IAAD,mBAApCqB,EAAoC,KAA5BC,EAA4B,KAAlBd,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAC/D,EAAKW,SAAS,CACZR,UAAWb,EACXC,gBACAa,WAAW,EACXC,MAAO,CAACN,EAAQa,EAAQZ,EAAQa,GAChCL,MAAO,CAACI,EAAQC,MA7DD,EAiEnBC,cAAgB,WACd,EAAKH,SAAS,CACZP,WAAW,EACXC,MAAO,CAAC,EAAG,MApEI,EAwEnBU,aAAe,WACbC,aAAa,EAAKC,eAClB,EAAKC,oBAAmB,GAExB,EAAKD,cAAgBE,YAAW,kBAAM,EAAKD,oBAAmB,KAAQ,MA5ErD,EA+EnBA,mBAAqB,SAACE,GACpB,EAAKT,SAAS,CAAES,eAChBzD,EAA0BZ,IA/E1B,EAAKkD,MAAQ,CACXO,MAAO,CAAC,EAAG,GACXH,MAAO,CAAC,EAAG,GACXF,UAAW,KACXZ,cAAe,KACfa,WAAW,EACXF,MAAOnD,EACPqE,YAAY,GATG,E,kFAcjBC,KAAKJ,cAAgB,KACrBtD,EAA0BZ,K,0CAI1BmB,OAAOoD,iBAAiB,YAAaD,KAAKzB,iBAC1C1B,OAAOoD,iBAAiB,YAAaD,KAAKvB,iBAC1C5B,OAAOoD,iBAAiB,WAAYD,KAAKP,eACzC5C,OAAOoD,iBAAiB,UAAWD,KAAKP,eACxC5C,OAAOoD,iBAAiB,SAAUD,KAAKN,gB,6CAIvC7C,OAAOqD,oBAAoB,SAAUF,KAAKN,gB,+BAyDlC,IAAD,SACmEM,KAAKpB,MAAvEC,EADD,EACCA,MAAOC,EADR,EACQA,UAAWZ,EADnB,EACmBA,cAAea,EADlC,EACkCA,UAAWI,EAD7C,EAC6CA,MAAOY,EADpD,EACoDA,WAC3D,OACE,yBAAKI,UAAU,SACZtB,EAAMzB,KAAI,SAACC,EAAQ+C,GAClB,OACE/C,EAAOD,KAAI,SAACK,GACV,IAAI4C,EACFC,EACAC,EACAC,EAAiB3B,EAAMuB,GAAUf,QAAQ5B,GACzCgD,EAAYhD,IAAQqB,GAAasB,IAAalC,GAAiBa,EAEjE,GAAG0B,EAAU,CAAC,IAAD,cACFtB,EADE,GACVmB,EADU,KACPC,EADO,KAEXF,EAAQ,CACNK,WAAYJ,EACZK,WAAYJ,EACZK,MAAOC,iBAAO,IAAKnD,SAEhB,GAAGqC,EAAY,CAAC,IAAD,cACX7C,EAAOkD,GAAUI,GADN,GACnBF,EADmB,KAChBC,EADgB,KAEpBF,EAAQ,CACNK,WAAYJ,EACZK,WAAYJ,EACZK,MAAO,OAEJ,CAAC,IAAD,cACI1D,EAAOkD,GAAUI,GADrB,GACJF,EADI,KACDC,EADC,KAELF,EAAQ,CACNK,WAAYG,iBAAOP,EAAGzC,GACtB8C,WAAYE,iBAAON,EAAG1C,GACtB+C,MAAOC,iBAAO,EAAGnD,IAIrB,OACE,kBAAC,SAAD,CAAQO,IAAKR,EAAK4C,MAAOA,IACtB,gBAAEK,EAAF,EAAEA,WAAYC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,MAA1B,OACD,yBACEE,YAAa,EAAKzC,gBAAgB0C,KAAK,KAAMtD,EAAK2C,EAAU,CAACE,EAAGC,IAChES,aAAc,EAAKhD,iBAAiB+C,KAAK,KAAMtD,EAAK2C,EAAU,CAACE,EAAGC,IAClEJ,UAAWM,EAAW,mBAAqB,OAC3CJ,MAAO,CACLY,gBAAgB,eAAD,OAAiBP,EAAjB,eAAkCC,EAAlC,wBAA4DC,EAA5D,KACfM,UAAU,eAAD,OAAiBR,EAAjB,eAAkCC,EAAlC,wBAA4DC,EAA5D,KACTO,OAAS1D,IAAQqB,GAAasB,IAAalC,EAAiB,GAAKsC,IAChE,yBAAKY,IAAKzF,EAAS8B,GAAM4D,IAAK5D,mB,GApI7B6D,IAAMC,WCrCfC,MAXf,WACE,OACE,yBAAKrB,UAAU,OACb,wBAAIA,UAAU,SAAd,eACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCHRsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.37f00541.chunk.js","sourcesContent":["import React from 'react';\nimport range from 'lodash/range';\nimport { Motion, spring } from 'react-motion';\n\nimport './ImageDrag.css';\n\nconst dataStructure = [ // structure that models our initial rendered view of items\n  [0, 1, 4],\n  [3],\n  [2]\n]\n\nconst pictures = [\n  \"https://s3-ap-southeast-2.amazonaws.com/images.getjarvis.com.au/9068b2bd089c037a144fc847b9967ee83dce0fe5299261a884adc3241a33604b.jpeg\",\n  \"https://s3-ap-southeast-2.amazonaws.com/images.getjarvis.com.au/9068b2bd089c037a144fc847b9967ee83dce0fe5299261a884adc3241a33604b.jpeg\",\n  \"https://s3-ap-southeast-2.amazonaws.com/images.getjarvis.com.au/9068b2bd089c037a144fc847b9967ee83dce0fe5299261a884adc3241a33604b.jpeg\",\n  \"https://s3-ap-southeast-2.amazonaws.com/images.getjarvis.com.au/9068b2bd089c037a144fc847b9967ee83dce0fe5299261a884adc3241a33604b.jpeg\",\n  \"https://s3-ap-southeast-2.amazonaws.com/images.getjarvis.com.au/9068b2bd089c037a144fc847b9967ee83dce0fe5299261a884adc3241a33604b.jpeg\"\n];\n\nconst reinsert = (array, colFrom, rowFrom, colTo, rowTo) => {\n  const _array = array.slice(0);\n  const val = _array[colFrom][rowFrom];\n  _array[colFrom].splice(rowFrom, 1);\n  _array[colTo].splice(rowTo, 0, val);\n  calculateVisiblePositions(_array);\n  return _array;\n}\n\nconst gutterPadding = 21;\nconst clamp = (n, min, max) => Math.max(Math.min(n, max), min);\nconst getColumnWidth = () => (window.innerWidth / dataStructure.length) - (gutterPadding / dataStructure.length); // spread columns over available window width\nconst height = 220; // crappy fixed item height :(\n\nlet width = getColumnWidth(),\n  layout = null;\n\n// items are ordered by their index in this visual positions array\nconst calculateVisiblePositions = (newOrder) => {\n  width = getColumnWidth();\n  layout = newOrder.map((column, col) => {\n      return range(column.length + 1).map((item, row) => {\n        return [width * col, height * row];\n    });\n });\n}\n\n// define spring motion opts\nconst springSetting1 = {stiffness: 180, damping: 10};\nconst springSetting2 = {stiffness: 150, damping: 16};\n\nclass ImageDrag extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse: [0, 0],\n      delta: [0, 0], // difference between mouse and item position, for dragging\n      lastPress: null, // key of the last pressed component\n      currentColumn: null,\n      isPressed: false,\n      order: dataStructure, // index: visual position. value: component key/id\n      isResizing: false\n    };\n  }\n\n  componentWillMount() {\n    this.resizeTimeout = null;\n    calculateVisiblePositions(dataStructure);\n  }\n\n  componentDidMount() {\n    window.addEventListener('touchmove', this.handleTouchMove);\n    window.addEventListener('mousemove', this.handleMouseMove);\n    window.addEventListener('touchend', this.handleMouseUp);\n    window.addEventListener('mouseup', this.handleMouseUp);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleTouchStart = (key, currentColumn, pressLocation, e) => {\n    this.handleMouseDown(key, currentColumn, pressLocation, e.touches[0]);\n  }\n\n  handleTouchMove = (e) => {\n    e.preventDefault();\n    this.handleMouseMove(e.touches[0]);\n  };\n\n  handleMouseMove = ({pageX, pageY}) => {\n    const {order, lastPress, currentColumn: colFrom, isPressed, delta: [dx, dy]} = this.state;\n    if (isPressed) {\n      const mouse = [pageX - dx, pageY - dy];\n      const colTo = clamp(Math.floor((mouse[0] + (width / 2)) / width), 0, 2);\n      const rowTo = clamp(Math.floor((mouse[1] + (height / 2)) / height), 0, 100);\n      const rowFrom = order[colFrom].indexOf(lastPress);\n      const newOrder = reinsert(order, colFrom, rowFrom, colTo, rowTo);\n      this.setState({\n        mouse,\n        order: newOrder,\n        currentColumn: colTo\n      });\n    }\n  };\n\n  handleMouseDown = (key, currentColumn, [pressX, pressY], {pageX, pageY}) => {\n    this.setState({\n      lastPress: key,\n      currentColumn,\n      isPressed: true,\n      delta: [pageX - pressX, pageY - pressY],\n      mouse: [pressX, pressY],\n    });\n  };\n\n  handleMouseUp = () => {\n    this.setState({\n      isPressed: false,\n      delta: [0, 0]\n    });\n  };\n\n  handleResize = () => {\n    clearTimeout(this.resizeTimeout);\n    this.applyResizingState(true);\n    // resize one last time after resizing stops, as sometimes this can be a little janky sometimes...\n    this.resizeTimeout = setTimeout(() => this.applyResizingState(false), 100);\n  }\n\n  applyResizingState = (isResizing) => {\n    this.setState({ isResizing });\n    calculateVisiblePositions(dataStructure);\n  }\n\n  render() {\n    const { order, lastPress, currentColumn, isPressed, mouse, isResizing } = this.state;\n    return (\n      <div className=\"items\">\n        {order.map((column, colIndex) => {\n          return (\n            column.map((row) => {\n              let style,\n                x,\n                y,\n                visualPosition = order[colIndex].indexOf(row),\n                isActive = (row === lastPress && colIndex === currentColumn && isPressed);\n\n              if(isActive) {\n                [x, y] = mouse;\n                style = {\n                  translateX: x,\n                  translateY: y,\n                  scale: spring(1.1, springSetting1)\n                };\n              } else if(isResizing) {\n                [x, y] = layout[colIndex][visualPosition];\n                style = {\n                  translateX: x,\n                  translateY: y,\n                  scale: 1\n                };\n              } else {\n                [x, y] = layout[colIndex][visualPosition];\n                style = {\n                  translateX: spring(x, springSetting2),\n                  translateY: spring(y, springSetting2),\n                  scale: spring(1, springSetting1)\n                };\n              }\n\n              return (\n                <Motion key={row} style={style}>\n                  {({translateX, translateY, scale}) =>\n                  <div\n                    onMouseDown={this.handleMouseDown.bind(null, row, colIndex, [x, y])}\n                    onTouchStart={this.handleTouchStart.bind(null, row, colIndex, [x, y])}\n                    className={isActive ? 'item active-item' : 'item'}\n                    style={{\n                      WebkitTransform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n                      transform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n                      zIndex: (row === lastPress && colIndex === currentColumn) ? 99 : visualPosition,\n                    }}><img src={pictures[row]} alt={row}/></div>\n                  }\n                </Motion>\n              )\n            })\n          )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default ImageDrag;","import React from 'react';\nimport ImageDrag from './ImageDrag';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Drag &amp; Drop</h1>\n      <div className=\"wrapper\">\n        <ImageDrag/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}